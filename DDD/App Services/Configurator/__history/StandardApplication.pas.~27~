unit StandardApplication;

interface

uses

  Application,
  AbstractApplication,
  ApplicationServiceRegistries,
  ClientAccount,
  SysUtils,
  Classes;

type

  TStandardApplication = class (TAbstractApplication)

    private

      FClientAccount: TClientAccount;
      FServiceRegistries: IApplicationServiceRegistries;

    public

      constructor Create(ServiceRegistries: IApplicationServiceRegistries);
      
      function GetApplicationServiceRegistries: IApplicationServiceRegistries; override;

      procedure SetApplicationServiceRegistries(
        Value: IApplicationServiceRegistries
      ); override;

      function GetClientAccount: TClientAccount; override;

      procedure SetClientAccount(ClientAccount: TClientAccount); override;

  end;

implementation

{ TStandardApplication }

constructor TStandardApplication.Create(
  ServiceRegistries: IApplicationServiceRegistries);
begin

  inherited Create;

  Self.ServiceRegistries := ServiceRegistries;
  
end;

function TStandardApplication.GetApplicationServiceRegistries: IApplicationServiceRegistries;
begin

  Result := FServiceRegistries;
  
end;

procedure TStandardApplication.SetApplicationServiceRegistries(
  Value: IApplicationServiceRegistries);
begin

  FServiceRegistries := Value;

end;

end.

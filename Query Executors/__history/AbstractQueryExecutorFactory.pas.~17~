unit AbstractQueryExecutorFactory;

interface

uses

  ConnectionInfo,
  QueryExecutor,
  AbstractConnectionFactory,
  QueryExecutorFactory,
  ConnectionFactory,
  SysUtils;

type

  TAbstractQueryExecutorFactory =
    class abstract (TInterfacedObject, IQueryExecutorFactory)

      private

        FFreeConnectionFactory: IConnectionFactory;
        
      protected

        FConnectionFactory: TAbstractConnectionFactory;

      public

        destructor Destroy; override;

        constructor Create(ConnectionFactory: TAbstractConnectionFactory);

        function CreateQueryExecutor(ConnectionInfo: TConnectionInfo): IQueryExecutor; overload; virtual; abstract;
        function CreateQueryExecutor(Connection: TObject): IQueryExecutor; overload; virtual; abstract;

    end;

implementation

{ TAbstractQueryExecutorFactory }

constructor TAbstractQueryExecutorFactory.Create(
  ConnectionFactory: TAbstractConnectionFactory);
begin

  inherited Create;

  FConnectionFactory := ConnectionFactory;
  
end;

destructor TAbstractQueryExecutorFactory.Destroy;
begin

  FreeAndNil(FConnectionFactory);
  
  inherited;

end;

end.

unit DomainObjectListUnit;

interface

uses

  SysUtils,
  Classes,
  DomainObjectUnit,
  IDomainObjectUnit,
  DomainObjectBaseListUnit,
  IDomainObjectListUnit,
  VariantListUnit,
  ClonableUnit,
  EquatableUnit;

type

  TDomainObjectList = class;

  TDomainObjectListEnumerator = class (TDomainObjectBaseListEnumerator)

    protected
      
      function GetCurrentDomainObject: TDomainObject;

      constructor Create(DomainObjectList: TDomainObjectList);

    public

      property Current: TDomainObject read GetCurrentDomainObject;

  end;

  TDomainObjectList = class (
                             TDomainObjectBaseList,
                             IDomainObjectList
                            )

    protected

      function GetDomainObjectByIndex(Index: Integer): TDomainObject; virtual;

      procedure SetDomainObjectByIndex(
        Index: Integer;
        const Value: TDomainObject
      ); virtual;

      procedure DeleteDomainObjectEntryByIndex(const Index: Integer); virtual;

      function FindEntryByDomainObject(DomainObject: TDomainObject): TDomainObjectBaseEntry; virtual;

      function GetDomainObjectCount: Integer; virtual;

    public

      procedure InsertDomainObject(
        const Index: Integer;
        DomainObject: TDomainObject
      ); virtual;

      function First: TDomainObject; virtual;
      function Last: TDomainObject; virtual;

      function CreateDomainObjectIdentityList: TVariant
      procedure AddDomainObject(DomainObject: TDomainObject); virtual;

      function Contains(DomainObject: TDomainObject): Boolean; virtual;

      procedure DeleteDomainObject(DomainObject: TDomainObject); virtual;
      procedure DeleteDomainObjectByIdentity(const Identity: Variant); virtual;
      
      function FindByIdentity(const Identity: Variant): TDomainObject; virtual;

      function GetEnumerator: TDomainObjectListEnumerator; virtual;

      property Items[Index: Integer]: TDomainObject
      read GetDomainObjectByIndex
      write SetDomainObjectByIndex; default;
      
  end;

  TDomainObjectListClass = class of TDomainObjectList;
  
implementation

uses

  Variants,
  AuxDebugFunctionsUnit;

{ TDomainObjectListEnumerator }

constructor TDomainObjectListEnumerator.Create(
  DomainObjectList: TDomainObjectList);
begin

  inherited Create(DomainObjectList);

end;

function TDomainObjectListEnumerator.GetCurrentDomainObject: TDomainObject;
begin

  Result := TDomainObject(GetCurrentBaseDomainObject);

end;

{ TDomainObjectList }

procedure TDomainObjectList.AddDomainObject(DomainObject: TDomainObject);
begin

  AddBaseDomainObject(DomainObject);
  
end;

function TDomainObjectList.Contains(DomainObject: TDomainObject): Boolean;
begin

  Result := inherited Contains(DomainObject);
  
end;

procedure TDomainObjectList.DeleteDomainObject(DomainObject: TDomainObject);
var I: Integer;
begin

  DeleteBaseDomainObject(DomainObject);

end;

procedure TDomainObjectList.DeleteDomainObjectByIdentity(
  const Identity: Variant);
var DomainObject: TDomainObject;
begin

  DomainObject := FindByIdentity(Identity);

  if Assigned(DomainObject) then
    DeleteDomainObject(DomainObject);

end;

procedure TDomainObjectList.DeleteDomainObjectEntryByIndex(
  const Index: Integer);
begin

  DeleteBaseDomainObjectEntryByIndex(Index);
  
end;

function TDomainObjectList.FindByIdentity(const Identity: Variant): TDomainObject;
var Entry: TDomainObjectBaseEntry;
    I: Integer;
begin

  for I := 0 to Count - 1 do begin

    Entry := GetBaseDomainObjectEntryByIndex(I);

    if (Entry.BaseDomainObject.Self as TDomainObject).Identity = Identity then begin

      Result := Entry.BaseDomainObject.Self as TDomainObject;
      Exit;

    end;

  end;

  Result := nil;

end;

function TDomainObjectList.FindEntryByDomainObject(
  DomainObject: TDomainObject
): TDomainObjectBaseEntry;
begin

  Result := TDomainObjectBaseEntry(inherited FindEntryByBaseDomainObject(DomainObject));

end;

function TDomainObjectList.First: TDomainObject;
begin

  Result := TDomainObject(inherited First);
  
end;

function TDomainObjectList.GetDomainObjectByIndex(
  Index: Integer): TDomainObject;
begin

  Result := TDomainObject(inherited GetBaseDomainObjectByIndex(Index));

end;

function TDomainObjectList.GetDomainObjectCount: Integer;
begin

  Result := GetBaseDomainObjectCount;
  
end;

function TDomainObjectList.GetEnumerator: TDomainObjectListEnumerator;
begin

  Result := TDomainObjectListEnumerator.Create(Self);
  
end;

procedure TDomainObjectList.InsertDomainObject(
  const Index: Integer;
  DomainObject: TDomainObject
);
begin

  InsertBaseDomainObject(Index, DomainObject);
  
end;

function TDomainObjectList.Last: TDomainObject;
begin

  Result := TDomainObject(inherited Last);
  
end;

procedure TDomainObjectList.SetDomainObjectByIndex(
  Index: Integer;
  const Value: TDomainObject
);
begin

  SetBaseDomainObjectByIndex(Index, Value);

end;

end.
